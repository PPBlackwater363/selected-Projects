package problem1.controller;

import java.util.List;
import java.util.Objects;
import problem1.model.InvalidToDoItemParameterException;
import problem1.model.ToDoItem;
import problem1.model.ToDoItemsList;

/**
 * Create AddCommandParameter class for AddCommand to store information.
 */
public class AddCommandParameters extends CommandParameters {
  private ToDoItem toDoItem;
  private ToDoItemsList toDoItemsList;

  /**
   * Construct an AddCommandParameters class by given info.
   * @param list - a list of CmdOptions.
   * @param toDoItemsList - a list of ToDoItems.
   * @throws InvalidToDoItemParameterException - if the list of ToDOItems is invalid.
   * @throws InvalidCommandParametersException - if the list of CmdOption is invalid.
   */
  public AddCommandParameters(List<CmdOption> list, ToDoItemsList toDoItemsList)
      throws InvalidToDoItemParameterException, InvalidCommandParametersException {
    int numOfAddCmd = 0;
    int numOfTextCmd = 0;
    int numOfDueCmd = 0;
    int numOfPriorityCmd = 0;
    int numOfCategoryCmd = 0;
    int numOfCompletedCmd = 0;
    String ID = "0";
    String text = null;
    String dueDate = null;
    String complete = "false";
    String priority = null;
    String category = null;

    for (CmdOption option : list) {
      String cmdName = option.getName();

      switch(cmdName) {

        case "--add-todo":
          numOfAddCmd++;
          break;

        case "--todo-text":
          numOfTextCmd++;
          text = option.getValue();
          break;

        case "--completed":
          numOfCompletedCmd++;
          complete = "true";
          numOfCompletedCmd++;
          break;

        case "--due":
          numOfDueCmd++;
          dueDate = option.getValue();
          break;

        case "--priority":
          numOfPriorityCmd++;
          priority = option.getValue();
          break;

        case "--category":
          numOfCategoryCmd++;
          category = option.getValue();
          break;

        default:
          break;
      }
    }
    if (numOfTextCmd > 1 || numOfDueCmd > 1 || numOfPriorityCmd > 1 || numOfCategoryCmd > 1 ||
        numOfCompletedCmd > 1)
      throw new IllegalArgumentException("Only one -add-todo item command is required.");
    if (numOfAddCmd != 1)
      throw new InvalidCommandParametersException("Only one --add-todo command is accepted.");

    ID = String.valueOf(toDoItemsList.generateNewItemID());

    this.toDoItem = new ToDoItem(ID, text, complete, dueDate, priority, category);
    this.toDoItemsList = toDoItemsList;
  }

  /**
   * Get the generated ToDoItem.
   * @return - the ToDoItem generated by the AddCommandParameters.
   */
  public ToDoItem getToDoItem() {
    return toDoItem;
  }

  /**
   * Get the list of generated ToDoItems.
   * @return - the list of ToDoItems generated by the AddCommandParameters.
   */
  public ToDoItemsList getToDoItemsList() {
    return toDoItemsList;
  }

  /**
   * Create an equals method should return true if and only if two AddCommand
   * have same given fields.
   *
   * @param o - an object o
   * @return - true if the two two PhoneValidator have same fields,
   * return false otherwise.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof AddCommandParameters)) {
      return false;
    }
    AddCommandParameters that = (AddCommandParameters) o;
    return Objects.equals(this.toDoItem, that.toDoItem) &&
        Objects.equals(this.toDoItemsList, that.toDoItemsList);
  }

  /**
   * Create a hashCode method of AddCommandParameters.
   * @return a result of hashCode, expressed as an int.
   */
  @Override
  public int hashCode() {
    return Objects.hash(this.toDoItem, this.toDoItemsList);
  }

  /**
   * Create a toString method of AddCommandParameters.
   * @return the string expression of AddCommandParameters.
   */
  @Override
  public String toString() {
    return "AddCommandParameters{" +
        "toDoItem=" + this.toDoItem +
        ", toDoItemsList='" + this.toDoItemsList + '\'' +
        '}';
  }
}


